import os
from pathlib import Path
from typing import List, Tuple, Optional

def display_files_table(files: List[Path]) -> None:
    """Hi·ªÉn th·ªã danh s√°ch file d∆∞·ªõi d·∫°ng b·∫£ng ƒë·∫πp m·∫Øt"""
    print(f"\n{'‚ï≠':<1}{'‚îÄ' * 78}{'‚ïÆ'}")
    print(f"‚îÇ {'STT':<4} ‚îÇ {'T√äN FILE':<40} ‚îÇ {'K√çCH TH∆Ø·ªöC':<12} ‚îÇ {'LO·∫†I':<15} ‚îÇ")
    print(f"‚îÇ{'‚îÄ' * 6}‚îº{'‚îÄ' * 42}‚îº{'‚îÄ' * 14}‚îº{'‚îÄ' * 17}‚îÇ")
    
    for idx, file_path in enumerate(files, 1):
        try:
            file_size = file_path.stat().st_size
            size_str = format_file_size(file_size)
            file_ext = file_path.suffix.upper() or "Kh√¥ng x√°c ƒë·ªãnh"
            file_name = file_path.name
            
            # C·∫Øt t√™n file n·∫øu qu√° d√†i
            if len(file_name) > 40:
                file_name = file_name[:37] + "..."
                
            print(f"‚îÇ {idx:<4} ‚îÇ {file_name:<40} ‚îÇ {size_str:<12} ‚îÇ {file_ext:<15} ‚îÇ")
            
        except Exception:
            print(f"‚îÇ {idx:<4} ‚îÇ {file_path.name:<40} ‚îÇ {'L·ªói':<12} ‚îÇ {'L·ªói':<15} ‚îÇ")
    
    print(f"{'‚ï∞':<1}{'‚îÄ' * 78}{'‚ïØ'}")

def format_file_size(size_bytes: int) -> str:
    """Chuy·ªÉn ƒë·ªïi byte th√†nh ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc"""
    if size_bytes < 1024:
        return f"{size_bytes}B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes/1024:.1f}KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes/(1024*1024):.1f}MB"
    else:
        return f"{size_bytes/(1024*1024*1024):.1f}GB"

def parse_selection(selection: str, max_files: int) -> List[int]:
    """
    Ph√¢n t√≠ch chu·ªói l·ª±a ch·ªçn th√†nh danh s√°ch s·ªë
    H·ªó tr·ª£: 1,2,3 ho·∫∑c 1-5 ho·∫∑c k·∫øt h·ª£p 1,3-5,7
    """
    selected_indices = set()
    
    try:
        # T√°ch theo d·∫•u ph·∫©y
        parts = [part.strip() for part in selection.split(',')]
        
        for part in parts:
            if '-' in part:
                # X·ª≠ l√Ω range nh∆∞ 1-5
                start, end = part.split('-', 1)
                start_idx = int(start.strip())
                end_idx = int(end.strip())
                
                if 1 <= start_idx <= max_files and 1 <= end_idx <= max_files:
                    for i in range(min(start_idx, end_idx), max(start_idx, end_idx) + 1):
                        selected_indices.add(i)
                else:
                    raise ValueError(f"S·ªë n·∫±m ngo√†i ph·∫°m vi: {part}")
            else:
                # X·ª≠ l√Ω s·ªë ƒë∆°n l·∫ª
                idx = int(part.strip())
                if 1 <= idx <= max_files:
                    selected_indices.add(idx)
                else:
                    raise ValueError(f"S·ªë n·∫±m ngo√†i ph·∫°m vi: {idx}")
    
    except ValueError as e:
        raise ValueError(f"ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: {e}")
    
    return sorted(list(selected_indices))

def choose_files_and_content() -> Tuple[List[str], List[str]]:
    """
    Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn nhi·ªÅu file t·ª´ th∆∞ m·ª•c v√† ƒë·ªçc n·ªôi dung.
    
    Returns:
        tuple: (danh_s√°ch_ƒë∆∞·ªùng_d·∫´n, danh_s√°ch_n·ªôi_dung)
    """
    print("‚ïî" + "‚ïê" * 50 + "‚ïó")
    print("‚ïë" + " " * 20 + "CH·ªåN FILE " + " " * 20 + "‚ïë")
    print("‚ïö" + "‚ïê" * 50 + "‚ïù")
    
    # Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c
    while True:
        path = input("\nüìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c (Enter ƒë·ªÉ tho√°t): ").strip()
        
        if not path:
            print("üëã Tho√°t ch∆∞∆°ng tr√¨nh.")
            return [], []

        path_obj = Path(path)
        
        if not path_obj.exists():
            print(f"‚ùå ƒê∆∞·ªùng d·∫´n '{path}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng th·ª≠ l·∫°i.")
            continue
        
        if not path_obj.is_dir():
            print(f"‚ùå '{path}' kh√¥ng ph·∫£i l√† th∆∞ m·ª•c. Vui l√≤ng th·ª≠ l·∫°i.")
            continue
            
        break

    # L·∫•y danh s√°ch file
    try:
        files = [f for f in path_obj.iterdir() if f.is_file()]
        
        if not files:
            print("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c.")
            return [], []

        # S·∫Øp x·∫øp theo t√™n
        files.sort(key=lambda x: x.name.lower())
        
        # Hi·ªÉn th·ªã b·∫£ng file
        print(f"\nüìã T√¨m th·∫•y {len(files)} file:")
        display_files_table(files)
        
        # H∆∞·ªõng d·∫´n ch·ªçn file
        print("\nüí° C√ÅCH CH·ªåN FILE:")
        print("   ‚Ä¢ Ch·ªçn 1 file: 1")
        print("   ‚Ä¢ Ch·ªçn nhi·ªÅu file: 1,3,5")
        print("   ‚Ä¢ Ch·ªçn d·∫£i file: 1-5")
        print("   ‚Ä¢ K·∫øt h·ª£p: 1,3-5,7")
        print("   ‚Ä¢ Ch·ªçn t·∫•t c·∫£: all")
        
        # Cho ng∆∞·ªùi d√πng ch·ªçn file
        while True:
            try:
                selection = input(f"\nüéØ Ch·ªçn file (1-{len(files)}): ").strip().lower()
                
                if not selection:
                    print("‚ùå Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn.")
                    continue
                
                if selection == "all":
                    selected_indices = list(range(1, len(files) + 1))
                else:
                    selected_indices = parse_selection(selection, len(files))
                
                if not selected_indices:
                    print("‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn.")
                    continue
                
                break
                
            except ValueError as e:
                print(f"‚ùå {e}. Vui l√≤ng th·ª≠ l·∫°i.")

        # Hi·ªÉn th·ªã file ƒë√£ ch·ªçn
        selected_files = [files[i-1] for i in selected_indices]
        print(f"\n‚úÖ ƒê√£ ch·ªçn {len(selected_files)} file:")
        for i, file_path in enumerate(selected_files, 1):
            print(f"   {i}. {file_path.name}")

        # ƒê·ªçc n·ªôi dung c√°c file
        file_paths = []
        file_contents = []
        
        print(f"\nüìñ ƒêang ƒë·ªçc n·ªôi dung...")
        
        for file_path in selected_files:
            try:
                # Th·ª≠ ƒë·ªçc v·ªõi UTF-8 tr∆∞·ªõc
                content = read_file_content(file_path)
                file_paths.append(str(file_path))
                file_contents.append(content)
                print(f"   ‚úì {file_path.name}")
                
            except Exception as e:
                print(f"   ‚ùå L·ªói ƒë·ªçc {file_path.name}: {e}")
                continue

        # T√πy ch·ªânh n·ªôi dung (t√πy ch·ªçn)
        print(f"\nüîß T√πy ch·ªânh n·ªôi dung:")
        customize = input("   Nh·∫≠p n·ªôi dung t√πy ch·ªânh (Enter ƒë·ªÉ b·ªè qua): ").strip()
        
        if customize:
            # Thay th·∫ø t·∫•t c·∫£ n·ªôi dung b·∫±ng n·ªôi dung t√πy ch·ªânh
            file_contents = [customize] * len(file_contents)
            print("   ‚úì ƒê√£ √°p d·ª•ng n·ªôi dung t√πy ch·ªânh cho t·∫•t c·∫£ file")

        return file_paths, file_contents

    except PermissionError:
        print(f"‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o th∆∞ m·ª•c '{path}'.")
        return [], []
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        return [], []

def read_file_content(file_path: Path) -> str:
    """ƒê·ªçc n·ªôi dung file v·ªõi nhi·ªÅu encoding"""
    encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except UnicodeDecodeError:
            continue
    
    # N·∫øu t·∫•t c·∫£ encoding ƒë·ªÅu th·∫•t b·∫°i, ƒë·ªçc d∆∞·ªõi d·∫°ng binary
    with open(file_path, 'rb') as f:
        binary_content = f.read()
        return f"[Binary file - {len(binary_content)} bytes]"

def main():
    """H√†m ch√≠nh ƒë·ªÉ test"""
    file_paths, contents = choose_files_and_content()
    
    if file_paths:
        print(f"\n{'='*60}")
        print(f"K·ªÇT QU·∫¢: ƒê√É CH·ªåN {len(file_paths)} FILE")
        print(f"{'='*60}")
        
        for i, (file_path, content) in enumerate(zip(file_paths, contents), 1):
            print(f"\nüìÑ FILE {i}: {Path(file_path).name}")
            print(f"üìç ƒê∆∞·ªùng d·∫´n: {file_path}")
            print("‚îÄ" * 40)
            
            # Hi·ªÉn th·ªã preview n·ªôi dung
            if len(content) > 300:
                print(content[:300])
                print(f"\n... (v√† {len(content) - 300} k√Ω t·ª± n·ªØa)")
            else:
                print(content)
            
            if i < len(file_paths):
                print("\n" + "="*40)
    else:
        print("\n‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn ho·∫∑c x·∫£y ra l·ªói.")

if __name__ == "__main__":
    main()